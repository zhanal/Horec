# Generated by Django 4.1.1 on 2022-09-19 13:39

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('model', models.CharField(max_length=25)),
                ('article', models.CharField(max_length=25)),
                ('purchase_price', models.IntegerField()),
                ('sell_price', models.IntegerField()),
                ('currency', models.CharField(choices=[('тенге', 'тенге'), ('евро', 'евро'), ('доллар', 'доллар')], default='тенге', max_length=10)),
                ('stock_qty', models.IntegerField(default=0)),
                ('reserved_qty', models.IntegerField(default=0)),
                ('ordered_qty', models.IntegerField(default=0)),
                ('ordered_free', models.IntegerField(default=0)),
                ('ordered_reserved', models.IntegerField(default=0)),
                ('pickup_date', models.DateField(blank=True)),
                ('status', models.CharField(blank=True, choices=[('не заказано', 'не заказано'), ('заказано', 'заказано'), ('не оплачено', 'не оплачено'), ('предоплачено', 'предоплачено'), ('оплачено', 'оплачено')], max_length=15)),
                ('proforma', models.CharField(blank=True, max_length=15)),
                ('brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.brand')),
                ('ordered_reserved_client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ordered_for', to='catalog.client')),
                ('ordered_reserved_manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ordered_by', to='catalog.manager')),
                ('reserved_client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reserved_for', to='catalog.client')),
                ('reserved_manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reserved_by', to='catalog.manager')),
            ],
        ),
    ]
